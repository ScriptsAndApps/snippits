<p>Move, press and release the mouse</p>
<p id="downlog">Down</p>
<p id="movelog">Move</p>
<p id="uplog">Up</p>
<p id="outlog">Out</p>
<canvas id="canvas" width=300 height=300></canvas>http://jsfiddle.net/h1zedvro/#




var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");

var canvasOffset = $("#canvas").offset();
var offsetX = canvasOffset.left;
var offsetY = canvasOffset.top;

var sii = [];
//setTimeout(draw,200);
function draw(e,lli) {
  
    sii.push(lli);
    var cv = document.getElementById('canvas');
    var ct = cv.getContext('2d');
    //ct.save();
    
    var w = cv.width;
    var h = cv.height;
    
    ct.clearRect(0, 0, w, h);
    ct.fillStyle = 'rgba(0, 255, 0, 1.0)';
    ct.fillRect(0, 0, w, h);
    
    ct.strokeStyle = 'rgba(127, 127, 255, 1.0)';
    ct.fillStyle = 'rgba(0, 0, 255, 1.0)';
    ct.lineWidth = 5;
    ct.beginPath();
    var i = 0;
    for(i=0;i<sii.length;i++){
    	ct.arc(sii[i].x, sii[i].y , 10, 10, 0, 2*Math.PI, 0);
    }
    ct.closePath();
    //ct.stroke();
    ct.fill();
    //ct.restore();
}



function handleMouseDown(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#downlog").html("Down: " + mouseX + " / " + mouseY);
		draw(e,{x:mouseX, y:mouseY});
    // Put your mousedown stuff here

}

function handleMouseUp(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#uplog").html("Up: " + mouseX + " / " + mouseY);

    // Put your mouseup stuff here
}

function handleMouseOut(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#outlog").html("Out: " + mouseX + " / " + mouseY);

    // Put your mouseOut stuff here
}

function handleMouseMove(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#movelog").html("Move: " + mouseX + " / " + mouseY);

}

$("#canvas").mousedown(function (e) {
    handleMouseDown(e);
});
$("#canvas").mousemove(function (e) {
    handleMouseMove(e);
});
$("#canvas").mouseup(function (e) {
    handleMouseUp(e);
});
$("#canvas").mouseout(function (e) {
    handleMouseOut(e);
});



















<html><head>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <title></title>
  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta name="robots" content="noindex, nofollow">
  <meta name="googlebot" content="noindex, nofollow">
  <meta name="viewport" content="width=device-width, initial-scale=1">


  <script type="text/javascript" src="//code.jquery.com/jquery-1.9.1.js"></script>

    <link rel="stylesheet" type="text/css" href="/css/result-light.css">


  <style id="compiled-css" type="text/css">
      body {
    background-color: ivory;
}
canvas {
    border:1px solid red;
}
    /* EOS */
  </style>

  <script id="insert"></script>


    <script src="/js/stringify.js?34104fef26a58bb6d13235b2b4d847f0c1ad10ec" charset="utf-8"></script>
    <script>
      const customConsole = (w) => {
        const pushToConsole = (payload, type) => {
          w.parent.postMessage({
            console: {
              payload: stringify(payload),
              type:    type
            }
          }, "*")
        }

        w.onerror = (message, url, line, column) => {
          // the line needs to correspond with the editor panel
          // unfortunately this number needs to be altered every time this view is changed
          line = line - 70
          if (line < 0){
            pushToConsole(message, "error")
          } else {
            pushToConsole(`[${line}:${column}] ${message}`, "error")
          }
        }

        let console = (function(systemConsole){
          return {
            log: function(){
              let args = Array.from(arguments)
              pushToConsole(args, "log")
              systemConsole.log.apply(this, args)
            },
            info: function(){
              let args = Array.from(arguments)
              pushToConsole(args, "info")
              systemConsole.info.apply(this, args)
            },
            warn: function(){
              let args = Array.from(arguments)
              pushToConsole(args, "warn")
              systemConsole.warn.apply(this, args)
            },
            error: function(){
              let args = Array.from(arguments)
              pushToConsole(args, "error")
              systemConsole.error.apply(this, args)
            },
            system: function(arg){
              pushToConsole(arg, "system")
            },
            clear: function(){
              systemConsole.clear.apply(this, {})
            },
            time: function(){
              let args = Array.from(arguments)
              systemConsole.time.apply(this, args)
            },
            assert: function(assertion, label){
              if (!assertion){
                pushToConsole(label, "log")
              }

              let args = Array.from(arguments)
              systemConsole.assert.apply(this, args)
            }
          }
        }(window.console))

        window.console = { ...window.console, ...console }

        console.system("Running fiddle")
      }

      if (window.parent){
        customConsole(window)
      }
    </script>
</head>
<p>Move, press and release the mouse</p><body>
    
<p id="downlog">Down: 84 / 170</p>
<p id="movelog">Move: 9 / 96</p>
<p id="uplog">Up: 84 / 170</p>
<p id="outlog">Out: -24 / 80</p>
<canvas id="canvas" width="300" height="300"></canvas>http://jsfiddle.net/h1zedvro/#

    <script type="text/javascript">//<![CDATA[



var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");

var canvasOffset = $("#canvas").offset();
var offsetX = canvasOffset.left;
var offsetY = canvasOffset.top;

var sii = [];
//setTimeout(draw,200);
function draw(e,lli) {
  
    sii.push(lli);
    var cv = document.getElementById('canvas');
    var ct = cv.getContext('2d');
    //ct.save();
    
    var w = cv.width;
    var h = cv.height;
    
    ct.clearRect(0, 0, w, h);
    ct.fillStyle = 'rgba(0, 255, 0, 1.0)';
    ct.fillRect(0, 0, w, h);
    
    ct.strokeStyle = 'rgba(127, 127, 255, 1.0)';
    ct.fillStyle = 'rgba(0, 0, 255, 1.0)';
    ct.lineWidth = 5;
    ct.beginPath();
    var i = 0;
    for(i=0;i<sii.length;i++){
    	ct.arc(sii[i].x, sii[i].y , 10, 10, 0, 2*Math.PI, 0);
    }
    ct.closePath();
    //ct.stroke();
    ct.fill();
    //ct.restore();
}



function handleMouseDown(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#downlog").html("Down: " + mouseX + " / " + mouseY);
		draw(e,{x:mouseX, y:mouseY});
    // Put your mousedown stuff here

}

function handleMouseUp(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#uplog").html("Up: " + mouseX + " / " + mouseY);

    // Put your mouseup stuff here
}

function handleMouseOut(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#outlog").html("Out: " + mouseX + " / " + mouseY);

    // Put your mouseOut stuff here
}

function handleMouseMove(e) {
    mouseX = parseInt(e.clientX - offsetX);
    mouseY = parseInt(e.clientY - offsetY);
    $("#movelog").html("Move: " + mouseX + " / " + mouseY);

}

$("#canvas").mousedown(function (e) {
    handleMouseDown(e);
});
$("#canvas").mousemove(function (e) {
    handleMouseMove(e);
});
$("#canvas").mouseup(function (e) {
    handleMouseUp(e);
});
$("#canvas").mouseout(function (e) {
    handleMouseOut(e);
});


  //]]></script>

  <script>
    // tell the embed parent frame the height of the content
    if (window.parent && window.parent.parent){
      window.parent.parent.postMessage(["resultsFrame", {
        height: document.body.getBoundingClientRect().height,
        slug: ""
      }], "*")
    }

    // always overwrite window.name, in case users try to set it manually
    window.name = "result"
  </script>

    <script>
      let allLines = []

      window.addEventListener("message", (message) => {
        if (message.data.console){
          let insert = document.querySelector("#insert")
          allLines.push(message.data.console.payload)
          insert.innerHTML = allLines.join(";\r")

          let result = eval.call(null, message.data.console.payload)
          if (result !== undefined){
            console.log(result)
          }
        }
      })
    </script>



</body></html>
